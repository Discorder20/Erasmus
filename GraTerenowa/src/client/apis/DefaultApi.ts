/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface AddNewGameAddNewGamePostRequest {
    userToken: string;
    title: string;
    coordX: number;
    coordY: number;
    description: string;
    tag: number;
}

export interface GetCitiesGetCitiesPostRequest {
    skip?: number;
}

export interface GetUserUserPostRequest {
    idUser: number;
}

export interface LogInByTokenLoginByTokenPostRequest {
    userToken: string;
}

export interface LogInLoginPostRequest {
    loginUser: string;
    passwordUser: string;
}

export interface SearchForGameAuthorSearchForGameAuthorPostRequest {
    data: string;
    sort?: string;
    skip?: number;
}

export interface SearchForGameDateSearchForGameDatePostRequest {
    data: string;
    sort?: string;
    skip?: number;
}

export interface SearchForGameNameSearchForGameNamePostRequest {
    data: string;
    sort?: string;
    skip?: number;
}

export interface SearchForGameSearchForGameCityPostRequest {
    data: string;
    sort?: string;
    skip?: number;
}

export interface SearchForGameTagsSearchForGameTagsPostRequest {
    data: string;
    sort?: string;
    skip?: number;
}

export interface SignUpSignupPostRequest {
    loginUser: string;
    passwordUser: string;
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Addnewgame
     */
    async addNewGameAddNewGamePostRaw(requestParameters: AddNewGameAddNewGamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userToken'] == null) {
            throw new runtime.RequiredError(
                'userToken',
                'Required parameter "userToken" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        if (requestParameters['title'] == null) {
            throw new runtime.RequiredError(
                'title',
                'Required parameter "title" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        if (requestParameters['coordX'] == null) {
            throw new runtime.RequiredError(
                'coordX',
                'Required parameter "coordX" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        if (requestParameters['coordY'] == null) {
            throw new runtime.RequiredError(
                'coordY',
                'Required parameter "coordY" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling addNewGameAddNewGamePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userToken'] != null) {
            queryParameters['userToken'] = requestParameters['userToken'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['coordX'] != null) {
            queryParameters['coordX'] = requestParameters['coordX'];
        }

        if (requestParameters['coordY'] != null) {
            queryParameters['coordY'] = requestParameters['coordY'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['tag'] != null) {
            queryParameters['tag'] = requestParameters['tag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addNewGame`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Addnewgame
     */
    async addNewGameAddNewGamePost(requestParameters: AddNewGameAddNewGamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addNewGameAddNewGamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getcities
     */
    async getCitiesGetCitiesPostRaw(requestParameters: GetCitiesGetCitiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/getCities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Getcities
     */
    async getCitiesGetCitiesPost(requestParameters: GetCitiesGetCitiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getCitiesGetCitiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getuser
     */
    async getUserUserPostRaw(requestParameters: GetUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['idUser'] == null) {
            throw new runtime.RequiredError(
                'idUser',
                'Required parameter "idUser" was null or undefined when calling getUserUserPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['idUser'] != null) {
            queryParameters['idUser'] = requestParameters['idUser'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Getuser
     */
    async getUserUserPost(requestParameters: GetUserUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getUserUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Loginbytoken
     */
    async logInByTokenLoginByTokenPostRaw(requestParameters: LogInByTokenLoginByTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['userToken'] == null) {
            throw new runtime.RequiredError(
                'userToken',
                'Required parameter "userToken" was null or undefined when calling logInByTokenLoginByTokenPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userToken'] != null) {
            queryParameters['userToken'] = requestParameters['userToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/loginByToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Loginbytoken
     */
    async logInByTokenLoginByTokenPost(requestParameters: LogInByTokenLoginByTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.logInByTokenLoginByTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async logInLoginPostRaw(requestParameters: LogInLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['loginUser'] == null) {
            throw new runtime.RequiredError(
                'loginUser',
                'Required parameter "loginUser" was null or undefined when calling logInLoginPost().'
            );
        }

        if (requestParameters['passwordUser'] == null) {
            throw new runtime.RequiredError(
                'passwordUser',
                'Required parameter "passwordUser" was null or undefined when calling logInLoginPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loginUser'] != null) {
            queryParameters['loginUser'] = requestParameters['loginUser'];
        }

        if (requestParameters['passwordUser'] != null) {
            queryParameters['passwordUser'] = requestParameters['passwordUser'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async logInLoginPost(requestParameters: LogInLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.logInLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Readmain
     */
    async readMainGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Readmain
     */
    async readMainGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readMainGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Searchforgameauthor
     */
    async searchForGameAuthorSearchForGameAuthorPostRaw(requestParameters: SearchForGameAuthorSearchForGameAuthorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling searchForGameAuthorSearchForGameAuthorPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchForGameAuthor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchforgameauthor
     */
    async searchForGameAuthorSearchForGameAuthorPost(requestParameters: SearchForGameAuthorSearchForGameAuthorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchForGameAuthorSearchForGameAuthorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchforgamedate
     */
    async searchForGameDateSearchForGameDatePostRaw(requestParameters: SearchForGameDateSearchForGameDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling searchForGameDateSearchForGameDatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchForGameDate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchforgamedate
     */
    async searchForGameDateSearchForGameDatePost(requestParameters: SearchForGameDateSearchForGameDatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchForGameDateSearchForGameDatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchforgamename
     */
    async searchForGameNameSearchForGameNamePostRaw(requestParameters: SearchForGameNameSearchForGameNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling searchForGameNameSearchForGameNamePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchForGameName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchforgamename
     */
    async searchForGameNameSearchForGameNamePost(requestParameters: SearchForGameNameSearchForGameNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchForGameNameSearchForGameNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchforgame
     */
    async searchForGameSearchForGameCityPostRaw(requestParameters: SearchForGameSearchForGameCityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling searchForGameSearchForGameCityPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchForGameCity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchforgame
     */
    async searchForGameSearchForGameCityPost(requestParameters: SearchForGameSearchForGameCityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchForGameSearchForGameCityPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchforgametags
     */
    async searchForGameTagsSearchForGameTagsPostRaw(requestParameters: SearchForGameTagsSearchForGameTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling searchForGameTagsSearchForGameTagsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['data'] != null) {
            queryParameters['data'] = requestParameters['data'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/searchForGameTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Searchforgametags
     */
    async searchForGameTagsSearchForGameTagsPost(requestParameters: SearchForGameTagsSearchForGameTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchForGameTagsSearchForGameTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signup
     */
    async signUpSignupPostRaw(requestParameters: SignUpSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['loginUser'] == null) {
            throw new runtime.RequiredError(
                'loginUser',
                'Required parameter "loginUser" was null or undefined when calling signUpSignupPost().'
            );
        }

        if (requestParameters['passwordUser'] == null) {
            throw new runtime.RequiredError(
                'passwordUser',
                'Required parameter "passwordUser" was null or undefined when calling signUpSignupPost().'
            );
        }

        if (requestParameters['firstName'] == null) {
            throw new runtime.RequiredError(
                'firstName',
                'Required parameter "firstName" was null or undefined when calling signUpSignupPost().'
            );
        }

        if (requestParameters['lastName'] == null) {
            throw new runtime.RequiredError(
                'lastName',
                'Required parameter "lastName" was null or undefined when calling signUpSignupPost().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling signUpSignupPost().'
            );
        }

        if (requestParameters['phoneNumber'] == null) {
            throw new runtime.RequiredError(
                'phoneNumber',
                'Required parameter "phoneNumber" was null or undefined when calling signUpSignupPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['loginUser'] != null) {
            queryParameters['loginUser'] = requestParameters['loginUser'];
        }

        if (requestParameters['passwordUser'] != null) {
            queryParameters['passwordUser'] = requestParameters['passwordUser'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['firstName'] = requestParameters['firstName'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['lastName'] = requestParameters['lastName'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['phoneNumber'] != null) {
            queryParameters['phoneNumber'] = requestParameters['phoneNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Signup
     */
    async signUpSignupPost(requestParameters: SignUpSignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.signUpSignupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
