/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Addnewgame
         * @param {string} userToken 
         * @param {string} title 
         * @param {number} coordX 
         * @param {number} coordY 
         * @param {string} description 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewGameAddNewGamePost: async (userToken: string, title: string, coordX: number, coordY: number, description: string, requestBody: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userToken' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'userToken', userToken)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'title', title)
            // verify required parameter 'coordX' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'coordX', coordX)
            // verify required parameter 'coordY' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'coordY', coordY)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'description', description)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addNewGameAddNewGamePost', 'requestBody', requestBody)
            const localVarPath = `/addNewGame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userToken !== undefined) {
                localVarQueryParameter['userToken'] = userToken;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (coordX !== undefined) {
                localVarQueryParameter['coordX'] = coordX;
            }

            if (coordY !== undefined) {
                localVarQueryParameter['coordY'] = coordY;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getcities
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitiesCitiesPost: async (skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gettags
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsTagsPost: async (skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getuser
         * @param {number} idUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUserPost: async (idUser: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idUser' is not null or undefined
            assertParamExists('getUserUserPost', 'idUser', idUser)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idUser !== undefined) {
                localVarQueryParameter['idUser'] = idUser;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Loginbytoken
         * @param {string} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInByTokenLoginByTokenPost: async (userToken: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userToken' is not null or undefined
            assertParamExists('logInByTokenLoginByTokenPost', 'userToken', userToken)
            const localVarPath = `/loginByToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userToken !== undefined) {
                localVarQueryParameter['userToken'] = userToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} loginUser 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInLoginPost: async (loginUser: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUser' is not null or undefined
            assertParamExists('logInLoginPost', 'loginUser', loginUser)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('logInLoginPost', 'password', password)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loginUser !== undefined) {
                localVarQueryParameter['loginUser'] = loginUser;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Readmain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMainGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searchforgame
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {string} [author] 
         * @param {string} [date] 
         * @param {string} [city] 
         * @param {string} [sort] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForGameSearchForGamePost: async (tag?: string, name?: string, author?: string, date?: string, city?: string, sort?: string, skip?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/searchForGame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Signup
         * @param {string} loginUser 
         * @param {string} password 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} email 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpSignupPost: async (loginUser: string, password: string, firstName: string, lastName: string, email: string, phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUser' is not null or undefined
            assertParamExists('signUpSignupPost', 'loginUser', loginUser)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('signUpSignupPost', 'password', password)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('signUpSignupPost', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('signUpSignupPost', 'lastName', lastName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('signUpSignupPost', 'email', email)
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('signUpSignupPost', 'phoneNumber', phoneNumber)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loginUser !== undefined) {
                localVarQueryParameter['loginUser'] = loginUser;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Addnewgame
         * @param {string} userToken 
         * @param {string} title 
         * @param {number} coordX 
         * @param {number} coordY 
         * @param {string} description 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewGameAddNewGamePost(userToken: string, title: string, coordX: number, coordY: number, description: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewGameAddNewGamePost(userToken, title, coordX, coordY, description, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addNewGameAddNewGamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Getcities
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCitiesCitiesPost(skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCitiesCitiesPost(skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCitiesCitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gettags
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsTagsPost(skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsTagsPost(skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTagsTagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Getuser
         * @param {number} idUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUserPost(idUser: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUserPost(idUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Loginbytoken
         * @param {string} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logInByTokenLoginByTokenPost(userToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logInByTokenLoginByTokenPost(userToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logInByTokenLoginByTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {string} loginUser 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logInLoginPost(loginUser: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logInLoginPost(loginUser, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logInLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Readmain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readMainGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readMainGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readMainGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Searchforgame
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {string} [author] 
         * @param {string} [date] 
         * @param {string} [city] 
         * @param {string} [sort] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchForGameSearchForGamePost(tag?: string, name?: string, author?: string, date?: string, city?: string, sort?: string, skip?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchForGameSearchForGamePost(tag, name, author, date, city, sort, skip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchForGameSearchForGamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Signup
         * @param {string} loginUser 
         * @param {string} password 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} email 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpSignupPost(loginUser: string, password: string, firstName: string, lastName: string, email: string, phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpSignupPost(loginUser, password, firstName, lastName, email, phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signUpSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Addnewgame
         * @param {string} userToken 
         * @param {string} title 
         * @param {number} coordX 
         * @param {number} coordY 
         * @param {string} description 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewGameAddNewGamePost(userToken: string, title: string, coordX: number, coordY: number, description: string, requestBody: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.addNewGameAddNewGamePost(userToken, title, coordX, coordY, description, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getcities
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCitiesCitiesPost(skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getCitiesCitiesPost(skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gettags
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsTagsPost(skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getTagsTagsPost(skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getuser
         * @param {number} idUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUserPost(idUser: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.getUserUserPost(idUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Loginbytoken
         * @param {string} userToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInByTokenLoginByTokenPost(userToken: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logInByTokenLoginByTokenPost(userToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {string} loginUser 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logInLoginPost(loginUser: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logInLoginPost(loginUser, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Readmain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readMainGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readMainGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Searchforgame
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {string} [author] 
         * @param {string} [date] 
         * @param {string} [city] 
         * @param {string} [sort] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForGameSearchForGamePost(tag?: string, name?: string, author?: string, date?: string, city?: string, sort?: string, skip?: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.searchForGameSearchForGamePost(tag, name, author, date, city, sort, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Signup
         * @param {string} loginUser 
         * @param {string} password 
         * @param {string} firstName 
         * @param {string} lastName 
         * @param {string} email 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpSignupPost(loginUser: string, password: string, firstName: string, lastName: string, email: string, phoneNumber: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.signUpSignupPost(loginUser, password, firstName, lastName, email, phoneNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Addnewgame
     * @param {string} userToken 
     * @param {string} title 
     * @param {number} coordX 
     * @param {number} coordY 
     * @param {string} description 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addNewGameAddNewGamePost(userToken: string, title: string, coordX: number, coordY: number, description: string, requestBody: Array<string>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addNewGameAddNewGamePost(userToken, title, coordX, coordY, description, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getcities
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCitiesCitiesPost(skip?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCitiesCitiesPost(skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gettags
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTagsTagsPost(skip?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTagsTagsPost(skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getuser
     * @param {number} idUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserUserPost(idUser: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserUserPost(idUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Loginbytoken
     * @param {string} userToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logInByTokenLoginByTokenPost(userToken: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logInByTokenLoginByTokenPost(userToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {string} loginUser 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logInLoginPost(loginUser: string, password: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logInLoginPost(loginUser, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Readmain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readMainGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readMainGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Searchforgame
     * @param {string} [tag] 
     * @param {string} [name] 
     * @param {string} [author] 
     * @param {string} [date] 
     * @param {string} [city] 
     * @param {string} [sort] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchForGameSearchForGamePost(tag?: string, name?: string, author?: string, date?: string, city?: string, sort?: string, skip?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchForGameSearchForGamePost(tag, name, author, date, city, sort, skip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Signup
     * @param {string} loginUser 
     * @param {string} password 
     * @param {string} firstName 
     * @param {string} lastName 
     * @param {string} email 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signUpSignupPost(loginUser: string, password: string, firstName: string, lastName: string, email: string, phoneNumber: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signUpSignupPost(loginUser, password, firstName, lastName, email, phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }
}



